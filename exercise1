1) Create a repository

cd /Users/shoryagupta/Documents
mkdir exercise1 (making directory)
cd exercise1
git init
git config --global user.name shorya009. (setting global variables)
git config --global user.email shorya@vinsol (setting global variables)
git config -l  (to list all config variables)

2)Make some changes -- add some files, change content of some files

touch file1.txt (creating new file)
open file1.txt  (added few lines)
git add file1.txt 
git status  (to see files added to staging area)
open file1.txt  (made changes/added few more line)
git add file1.txt

3)commit changes

git diff  (to see changes made )
git commit -m “my first commit”
git log (to see history of all commits)

4)repeat steps 1-3 for 2 more times. try to remove and ignore some files . Use git diff before each commit.

git status
git config --global core.excludesFile .gitignore (set global parameter to ignore a file)
(Add file name in .gitignore to ignore it)
Touch file3.txt (create new file)
open file3.txt (add few lines)
git add file3.txt
git rm -f file3.txt (to remove a file in statging area)
Open file1.txt  (Do some changes)
git status

5)create changes and revert those changes using git when those changes are not added to staging are

Open file1.txt (Do some changes)
git status
git checkout file1.txt  (to undo the changes made to file )

6)create changes and revert those changes after adding changes to staging area

Open file1.txt (Do some changes)
git add file1.txt
git Reset HEAD file1.txt (unstage a file present in staging area)
git checkout file1.txt (to undo the changes made to file )

7)create change and revert those changes after committing those changes 

Open file1.txt (Do some changes)
git add file1.txt
git status
git diff
git commit -m "made changes in file1.txt"
git reser HEAD~ (to undo last commit made)
git checkout file1.txt (to undo the changes made to file )

8)Check repository status before adding changes to staging area, after adding changes to staging area
and after committing changes .

open file1.txt (make changes)
git status
git add file1.txt
git status
git diff
git commit -m "made changes in file1.txt "
git status

9)Display all the commits 

git log

10)Display a specific commit 

git log ( to display all commits)
git log -3/-2/-1 (to see last 3/2/1 commits)
git log --after "2014-02-01" --before "2014-02-02" (to see commits between two dates)

11)create branches called "feature1" and "feature2" from master

git branch feature1
git branch feature2
git branch -d feature2

12) Delete branch "feature2"

git branch -d feature2

13)Make some commits on "feature1"

Open file1.txt (made some changes)
git add file1.txt
git status
git diff
git commit -m “made changes in feature1 branch file1.txt”

14)Make some commits on branch "master"

git checkout master
Open file1.txt - do some changes
git status
git add file1.txt
git diff
git commit -m “made changes in master file1.txt”

15)merge branch "feature1" in "master" (make some conflicts by changing same file on same line in both the branches) 

git checkout master
git merge feature1 
open file1.txt (Solved the conflicts)
git status
git add file1.txt
git merge --continue (give a auto merge message "merge branch feature1")
git status


16)create branch "feature2" from master 

git branch
git branch feature2

17)Make some commits on "feature2"

git checkout feature2
Open file1.txt (made some changes)
git add file1.txt
git status
git diff
git commit -m “made changes in feature2 file1.txt”
git checkout master

18)Make some commits on branch "master"

git checkout master
Open file1.txt ( do some changes)
git status
git add file1.txt
git diff
git commit -m “made changes in master file1.txt”

19)rebase branch "master" in "feature2" (make some conflicts by changing same file on same line in both the branches) 

git rebase feature2
open file1.txt (Resolved conflicts)
git add file1.txt
git rebase --continue
git status
git diff

20) find the differences between "merge" and "rebase" in above cases.

git merge apply all unique commits from branch master into branch feature2 in one commit with final result
git merge doesn’t rewrite commit history, just adds one new commit

git rebase gets all unique commits from both branches and applies them one by one
git rebase rewrites commit history but doesn’t create extra commit for merging

21)Use git stash

git stash save “point1”
git checkout master (do changes in file)
git checkout feature1
git stash list (to see all statshes)
git stash apply stash@{0} (to continue the statsh)
git stashes clear (To remove all stashes)
git stash pop (to remove the last stash)
git stash drop stash@{0} (To remove particular stash)

22)create a repository on github for your working repository and push changes on remote repository.

create a repository on git
git checkout master
git remote add path_name_of_repository_created
git pull orgin master
(solve the conflicts in files)
git add .
git status
git diff
git commit -m "solved the conflicts"
git push -u origin master




